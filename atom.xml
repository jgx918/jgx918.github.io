<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[刺猬的程序猿之道]]></title>
  <link href="http://www.jgx918.top/atom.xml" rel="self"/>
  <link href="http://www.jgx918.top/"/>
  <updated>2018-12-06T17:38:24+08:00</updated>
  <id>http://www.jgx918.top/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[1. SSH连接到iPhone]]></title>
    <link href="http://www.jgx918.top/15416870987518.html"/>
    <updated>2018-11-08T22:24:58+08:00</updated>
    <id>http://www.jgx918.top/15416870987518.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>SSH是一种网络协议，用于计算机之间的加密登录。</p>
</blockquote>

<h2 id="toc_0">1. 在iOS8和iOS9的越狱设备上，可以通过安装OpenSSH来登录。</h2>

<h3 id="toc_1">1.1 安装OpenSSH</h3>

<p>在Cydia中搜索并安装OpenSSH<br/>
<img src="media/15416870987518/15419411816657.jpg" alt=""/></p>

<h3 id="toc_2">1.2 终端登录到iPhone</h3>

<p><strong>1.2.1 确保电脑和iPhone处于同一局域网内</strong><br/>
<strong>1.2.2 打开iPhone Wifi设置页面，查看IP地址</strong><br/>
<img src="media/15416870987518/15419414267718.jpg" alt=""/><br/>
我这里iPhoneIP地址为192.168.3.4<br/>
打开终端输入<code>ssh root@192.168.3.4</code></p>

<blockquote>
<p>在iOS10.0~10.2的越狱系统，越狱工具yalu内置了一个相对轻量化的SSH服务dropbear。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.面向对象]]></title>
    <link href="http://www.jgx918.top/15409946209221.html"/>
    <updated>2018-10-31T22:03:40+08:00</updated>
    <id>http://www.jgx918.top/15409946209221.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">Objective-C的本质</h3>

<p>我们平时编写的Objective-C代码，底层实现其实都是C/C++代码</p>

<h2 id="toc_1"><img src="media/15409946209221/15409948445597.jpg" alt="" style="width:848px;"/></h2>

<p>Objective-C的对象、类主要是基于C\C++的结构体实现的</p>

<h3 id="toc_2">验证</h3>

<p>1.创建一个命令行项目<br/>
<img src="media/15409946209221/15409956532525.jpg" alt="" style="width:722px;"/></p>

<p>2.终端定位到main.m目录下运行<code>clang -rewrite-objc main.m -o main.cpp  (不推荐)</code><br/>
生成文件如下<br/>
<img src="media/15409946209221/15409957638672.jpg" alt="" style="width:750px;"/></p>

<p>但是我们iOS开发，想生成arm64架构下的cpp代码的话需要运行：<br/>
<code>xcrun -sdk iphoneos clang -arch arm64 -rewrite-objc  main.m -o main-arm64.cpp</code></p>

<blockquote>
<p>上面arm64参数可以设置 <br/>
i386 模拟器<br/>
armv7 32bit机器<br/>
arm64 64bit机器</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0. 越狱环境搭建]]></title>
    <link href="http://www.jgx918.top/15348166022735.html"/>
    <updated>2018-08-21T09:56:42+08:00</updated>
    <id>http://www.jgx918.top/15348166022735.html</id>
    <content type="html"><![CDATA[
<p><img src="http://blogimage.jgx918.top/15416579224192.jpg" alt="" style="width:432px;"/></p>

<h3 id="toc_0">学习准备</h3>

<p>一台iPhone/iPad完美越狱设备（至少iPhone5s）</p>

<h3 id="toc_1">iOS Jailbreak（iOS越狱）</h3>

<p>什么是iOS Jailbreak</p>

<blockquote>
<p>利用iOS系统的漏洞，获取iOS系统的最高权限（Root），解开之前的各种限制（合法行为）</p>
</blockquote>

<h3 id="toc_2">iOS Jailbreak的优点</h3>

<ol>
<li>打造个性化、与众不同的iPhone</li>
<li>自由安装非AppSore来源的APP</li>
<li>灵活管理文件系统，让iPhone可以像U盘一样灵活</li>
<li>给开发者提供了逆向工程的环境</li>
</ol>

<h3 id="toc_3">iOS Jailbreak的缺点</h3>

<ol>
<li>不予保修</li>
<li>费电，越狱后的iOS系统会常驻一些进程，耗电速度提升约10%~20%</li>
<li>在新的iOS固件版本出来的时候，不能及时进行更新</li>
<li>不再受iOS系统默认的安全保护，容易被恶意软件攻击，个人隐私有被窃取的风险</li>
<li>如果安装了不稳定的插件，容易让系统变得不稳定、变慢，甚至出现“白苹果”等问题</li>
</ol>

<h3 id="toc_4">完美越狱与不完美越狱</h3>

<ul>
<li>完美越狱：越狱后的iPhone可以正常的开机和重启</li>
<li>不完美越狱：iPhone一旦关机后再开机时，屏幕会一直停留在启动画面，也就是“白苹果”状态。或者能正常开机，但已经安装的破解软件无法正常使用，需要重新连接PC进行引导才能使用。</li>
</ul>

<h3 id="toc_5">如何判断是否越狱成功？</h3>

<ol>
<li>iPhone桌面是否有Cydia</li>
<li>PP助手查看</li>
</ol>

<h3 id="toc_6">越狱成功后需要安装的一些插件</h3>

<ol>
<li>Apple File Conduit &quot;2&quot;：可以访问整个iOS设备的文件系统</li>
<li>AppSync Unified：可以绕过系统验证，随意安装、运行破解的ipa安装包</li>
<li>iFile：可以在iPhone上自由访问iOS文件系统</li>
<li>PP助手</li>
</ol>

<p>Mac必备</p>

<ol>
<li>iFunBox：管理文件系统</li>
<li>PP助手</li>
</ol>

<h3 id="toc_7">如何在iOS代码中判断设备是否越狱？</h3>

<ol>
<li>最简单的一种方法：判断手机是否安装了Cydia</li>
</ol>

<pre><code class="language-objectivec">+ (BOOL)re_isJailback {
    return [[NSFileManage defaultManager] fileExistsAtPath:@&quot;/Applications/Cydia.app&quot;];
}

</code></pre>

<ol>
<li>更完整的方法</li>
</ol>

<pre><code class="language-objectivec">#import &lt;sys/stat.h&gt;
#import &lt;dlfcn.h&gt;

+ (BOOL)re_isJailback {
    // 检测环境变量
    // Mac/iOS可以透过设置DYLD_INSERT_LIBRARIES，说明动态库被修改过
    if (getenv(&quot;DYLD_INSERT_LIVRARIES&quot;)) {
            return YES;
        }
        // 检测越狱中常见的文件、文件夹是否存在
        static const char* pathes[] = {
            &quot;/Applications/Cydia.app&quot;,
            &quot;/Library/MobileSubstrate/MobileSubstrate.dylib&quot;,
            &quot;/var/lib/cydia&quot;,
            &quot;/var/lib/apt&quot;,
            &quot;/var/cache/apt&quot;,
            &quot;/etc/apt&quot;,
            &quot;/bin/bash&quot;,
            &quot;/bin/sh&quot;,
            &quot;/usr/sbin/sshd&quot;,
            &quot;/usr/libexec/ssh-keysig&quot;,
            &quot;/etc/ssh/sshd_config&quot;
        };
        
        static const int pathCount = sizeof(pathes) / sizeof(pathes[0]);
        // 文件信息
        struct stat statInfo;
        // 遍历文件
        for (int i = 0; i &lt; pathCount; i++) {
            if (stat(pathes[i], &amp;statInfo) == 0) {
                return YES;
            }
        }
        
        // 没有越狱
        return NO;

}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TabNavigator]]></title>
    <link href="http://www.jgx918.top/15217295034578.html"/>
    <updated>2018-03-22T22:38:23+08:00</updated>
    <id>http://www.jgx918.top/15217295034578.html</id>
    <content type="html"><![CDATA[
<p><a href="https://github.com/happypancake/react-native-tab-navigator">https://github.com/happypancake/react-native-tab-navigator</a></p>

<p>1.安装 <code>cd到项目根路径下 npm install react-native-tab-navigator --save</code></p>

<p>2.导入<code>import TabNavigator from &#39;react-native-tab-navigator&#39;;</code></p>

<p>3.</p>

<pre><code class="language-javascript">type Props = {};
export default class App extends Component&lt;Props&gt; {
    constructor(props) {
        super(props);
        this.state = {
            selectedTab : &#39;home&#39;,
        }
    }
  render() {
    return (
        &lt;View style={styles.container}&gt;
            &lt;TabNavigator&gt;
                &lt;TabNavigator.Item
                    selected={this.state.selectedTab === &#39;home&#39;}
                    title=&quot;Home&quot;
                    renderIcon={() =&gt; &lt;Image source={require(&#39;./res/images/tab/tab_home.png&#39;)} /&gt;}
                    tintColor={&#39;2da4fe&#39;}
                    // renderSelectedIcon={() =&gt; &lt;Image source={...} /&gt;}
                    // badgeText=&quot;1&quot;
                    onPress={() =&gt; this.setState({ selectedTab: &#39;home&#39; })}&gt;
                    &lt;View&gt;&lt;/View&gt;
                &lt;/TabNavigator.Item&gt;
                &lt;TabNavigator.Item
                    selected={this.state.selectedTab === &#39;profile&#39;}
                    title=&quot;Profile&quot;
                    renderIcon={() =&gt; &lt;Image source={require(&#39;./res/images/tab/tab_pk.png&#39;)} /&gt;}
                    tintColor={&#39;2da4fe&#39;}
                    // renderSelectedIcon={() =&gt; &lt;Image source={...} /&gt;}
                    // renderBadge={() =&gt; &lt;CustomBadgeView /&gt;}
                    onPress={() =&gt; this.setState({ selectedTab: &#39;profile&#39; })}&gt;
                    &lt;View&gt;&lt;/View&gt;
                &lt;/TabNavigator.Item&gt;
            &lt;/TabNavigator&gt;
        &lt;/View&gt;
    );

  }
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Core Data学习笔记1：第一个Core Data App]]></title>
    <link href="http://www.jgx918.top/15130502680661.html"/>
    <updated>2017-12-12T11:44:28+08:00</updated>
    <id>http://www.jgx918.top/15130502680661.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">通过本章你将学习到：</h3>

<h4 id="toc_1"><a href="#1">1.Xcode创建/编辑 Core Data Model</a></h4>

<h4 id="toc_2"><a href="#2">2.使用Core Data保存数据</a></h4>

<h4 id="toc_3"><a href="#3">3.获取Core Data里的数据</a></h4>

<h4 id="toc_4"><a href="http://www.baidu.com">超链接</a></h4>

<h4 id="toc_5">最终效果预览</h4>

<p><img src="http://blogImage.jgx918.top/2017-12-12-15130641531764.gif" alt=""/></p>

<h3 id="toc_6"><span id="1">1.Xcode创建/编辑 Core Data Model</span></h3>

<p>1.打开Xcode，创建一个Single View App并勾选Use Core Data<br/>
<img src="http://blogImage.jgx918.top/2017-12-12-15130597144276.jpg" alt=""/></p>

<p>勾选Use Core Data，Xcode会在AppDelegate会生成Core Data代码模板</p>

<blockquote>
<p>在Xcode 9中，只有master - detail App和Single View App模板才有Core Data复选框。</p>
</blockquote>

<p>打开Main.storyboard搭建UI<br/>
<img src="http://blogImage.jgx918.top/2017-12-12-15130609463903.jpg" alt=""/></p>

<p>添加代码</p>

<pre><code class="language-swift">class ViewController: UIViewController {
    
    @IBOutlet weak var tableView: UITableView!
    
    var names: [String] = []
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: &quot;Cell&quot;)
    }
    
    @IBAction func addClick(_ sender: UIBarButtonItem) {
        
        let alertController = UIAlertController(title: &quot;New&quot;, message: &quot;输入新名字&quot;, preferredStyle: .alert)
        
        alertController.addAction(UIAlertAction(title: &quot;保存&quot;, style: .default, handler: { [unowned self] (_) in
            guard let textField = alertController.textFields?.first,
                let name = textField.text else {
                    return
            }
            
            self.names.append(name)
            self.tableView.reloadData()
        }))
        
        alertController.addTextField(configurationHandler: nil)
        
        alertController.addAction(UIAlertAction(title: &quot;取消&quot;, style: .cancel, handler: nil))
        present(alertController, animated: true, completion: nil)
    }
}

extension ViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        return names.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell {
            
        let cell = tableView.dequeueReusableCell(withIdentifier: &quot;Cell&quot;, for: indexPath)
        cell.textLabel?.text = names[indexPath.row]
        return cell
    }
}
</code></pre>

<p>UI效果如下<br/>
<img src="http://blogImage.jgx918.top/2017-12-12-15130611452929.gif" alt=""/></p>

<p>这时，我们添加的数据是存在内存里，程序一旦退出数据就没了，下一步，我们讲通过Core Data进一步做数据持久化。</p>

<h3 id="toc_7"><span id="2">2.通过Core Data做数据持久化。</span></h3>

<ol>
<li><p>当你勾选Use Core Data创建应用时，Xocde会默认给你创建一个xcdatamodeld<br/>
<img src="http://blogImage.jgx918.top/2017-12-12-15130614782970.jpg" alt=""/></p></li>
<li><p>打开.xcdatamodeld，点击Add Entity<br/>
<img src="http://blogImage.jgx918.top/2017-12-12-15130615849620.jpg" alt=""/></p></li>
<li><p>双击刚刚创建的Entity改成你Model的名字<br/>
<img src="http://blogImage.jgx918.top/2017-12-12-15130617336647.jpg" alt=""/></p></li>
</ol>

<blockquote>
<p>这里 Entity 相当于一张Model，Attributes 是他的属性，Relationships是这个Model和其他Model的关系</p>
</blockquote>

<ol>
<li><p>我们先给People添加一个Attributes：name<br/>
<img src="http://blogImage.jgx918.top/2017-12-12-15130621771537.jpg" alt=""/></p></li>
<li><p>打开ViewController修改代码</p></li>
</ol>

<pre><code class="language-swift">import CoreData

class ViewController: UIViewController {
    
    @IBOutlet weak var tableView: UITableView!
    
    var people: [NSManagedObject] = []
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        tableView.register(UITableViewCell.self, forCellReuseIdentifier: &quot;Cell&quot;)
    }
    
    @IBAction func addClick(_ sender: UIBarButtonItem) {
        
        let alertController = UIAlertController(title: &quot;New&quot;, message: &quot;输入新名字&quot;, preferredStyle: .alert)
        
        alertController.addAction(UIAlertAction(title: &quot;保存&quot;, style: .default, handler: { [unowned self] (_) in
            guard let textField = alertController.textFields?.first,
                let name = textField.text else {
                    return
            }
            
            self.save(name: name)
            self.tableView.reloadData()
        }))
        
        alertController.addTextField(configurationHandler: nil)
        
        alertController.addAction(UIAlertAction(title: &quot;取消&quot;, style: .cancel, handler: nil))
        present(alertController, animated: true, completion: nil)
    }
    
    func save(name: String) {
        guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {
            return
        }
        
        // 1.获取上下文
        let managedContext = appDelegate.persistentContainer.viewContext
        
        // 2.获取entity
        let entity = NSEntityDescription.entity(forEntityName: &quot;People&quot;, in: managedContext)!
        
        // 3.创建NSManagedObject
        let person = NSManagedObject(entity: entity, insertInto: managedContext)
        
        // 4.设置属性
        person.setValue(name, forKey: &quot;name&quot;)
        
        // 5.保存
        do {
            try managedContext.save()
            people.append(person)
        } catch let error as NSError {
            print(&quot;Save Error: \(error), \(error.userInfo)&quot;)
        }
    }
}

extension ViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int {
        return people.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell {
            
        let cell = tableView.dequeueReusableCell(withIdentifier: &quot;Cell&quot;, for: indexPath)
        cell.textLabel?.text = people[indexPath.row].value(forKey: &quot;name&quot;) as? String
        return cell
    }
}
</code></pre>

<h3 id="toc_8"><span id="3">3.获取Core Data里的数据</span></h3>

<pre><code class="language-swift">override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {
            return
        }
        
        // 1
        let managedContext = appDelegate.persistentContainer.viewContext
        
        // 2
        let fetchRequest = NSFetchRequest&lt;NSManagedObject&gt;(entityName: &quot;People&quot;)
        
        // 3
        do {
            people = try managedContext.fetch(fetchRequest)
        } catch let error as NSError {
            print(&quot;Could not fetch. \(error), \(error.userInfo)&quot;)
        }
    }
</code></pre>

<blockquote>
<p>NSManagedObjectContext: 在使用Core Data做任何操作时都要用到<br/>
NSFetchRequest: 负责从Core Data获取类。可以筛选某些特定数据。（后面文章）</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0.iOS Core Data学习笔记0：简介]]></title>
    <link href="http://www.jgx918.top/15130488724687.html"/>
    <updated>2017-12-12T11:21:12+08:00</updated>
    <id>http://www.jgx918.top/15130488724687.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>学习教程 Ray wenderlich 的 《Core Data by Tutorials》<br/>
本学习笔记将基于 Swift 4，iOS11 和 Xcode9 进行编写<br/>
本博客仅为学习记录笔记之用</p>
</blockquote>

<p>Core Data是OS X和iOS SDKs的对象持久化管理框架。但Core Data不像SQLite和MySQL，你不需要考虑表、行，和主键。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVAudioPlayer播放音频详解]]></title>
    <link href="http://www.jgx918.top/15127046371475.html"/>
    <updated>2017-12-08T11:43:57+08:00</updated>
    <id>http://www.jgx918.top/15127046371475.html</id>
    <content type="html"><![CDATA[
<p>AVAudioPlayer构建于Core Audio中的C-based Audio Queue Services的最顶层。所以它可以提供所有你在Audio Queue Services中所能找到的核心功能，比如播放、循环甚至音频计量。除非你需要从网络流中播放音频、需要访问原始音频样本或者需要非常低的时延，否则AVAudioPlayer都能胜任。</p>

<h3 id="toc_0">1.  1. 创建AVAudioPlayer</h3>

<pre><code class="language-objectivec">#import &lt;AVFoundation/AVFoundation.h&gt;
    
@interface ViewController ()
    
@property (strong, nonatomic) AVAudioPlayer *player;
    
@end
    
@implementation ViewController
    
- (void)viewDidLoad {
    [super viewDidLoad];
    
    // url必须是沙盒或iPod里的资源
    NSURL *url = [[NSBundle mainBundle] URLForResource:@&quot;难念的经&quot; withExtension:@&quot;mp3&quot;];
    
    // 可能是nil
    self.player = [[AVAudioPlayer alloc] initWithContentsOfURL:url error:nil];
    
    // 音量 0 - 1
    self.player.volume = 0.5;
    
    // 立体声 -1（极左）到 1（极右）默认 0 (居中)
    self.player.pan = -1;
    
    // 播放速率 0.5 - 2
    self.player.rate = 1.5;
    self.player.enableRate = YES;
    
    // 循环 -1 无限循环
    self.player.numberOfLoops = -1;
    
    if (self.player) {
        // 这里会取得需要的音频硬件并预加载Audio Queue的缓冲区。
        // 可以减低调用play方法和听到声音输出的延迟
        [self.player prepareToPlay];
    }
}
    
- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event  {
    
    if ([self.player isPlaying]) {
        [self.player pause];
    } else {
        [self.player play];
    }
    
    // 假如调用 stop 会把 prepareToPlay 所做的都撤销掉
//    [self.player stop];
//    self.player.currentTime = 0;
}

</code></pre>

<h3 id="toc_1">2.配置音频会话</h3>

<p>在AppDelegate里设置</p>

<pre><code class="language-objectivec">AVAudioSession *session = [AVAudioSession sharedInstance];
        
NSError *error;
if (![session setCategory:AVAudioSessionCategoryPlayback error:&amp;error]) {
    NSLog(@&quot;Audio Category Error: %@&quot;, [error localizedDescription]);
}
    
if (![session setActive:YES error:&amp;error]) {
    NSLog(@&quot;Audio Active Error: %@&quot;, [error localizedDescription]);
}

</code></pre>

<h3 id="toc_2">3.开启后台播放</h3>

<p><img src="http://blogImage.jgx918.top/2017-12-08-15127048248995.jpg" alt=""/></p>

<h3 id="toc_3">4.处理中断事件</h3>

<p>注册AVAudioSession通知AVAudioSessionInterruptionNotification。</p>

<pre><code class="language-objectivec"> // 注册中断通知
[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handelInterruption:) name:AVAudioSessionInterruptionNotification object:[AVAudioSession sharedInstance]];
    
    
- (void)handelInterruption:(NSNotification *)notification {
    
    NSDictionary *info = notification.userInfo;
    
    AVAudioSessionInterruptionType type = [info[AVAudioSessionInterruptionTypeKey] unsignedIntegerValue];
    
    if (type == AVAudioSessionInterruptionTypeBegan) {
        // Handle AVAudioSessionInterruptionTypeBegan
        [self.player stop];
    } else {
        // Handle AVAudioSessionInterruptionTypeEnd
        // 如果中断类型为AVAudioSessionInterruptionTypeEnd，userInfo字典中会包含一个AVAudioSessionInterruptionOption来表明音频会话是否已经重新激活以及是否可以再次播放
        AVAudioSessionInterruptionOptions options = [info[AVAudioSessionInterruptionOptionKey] unsignedIntegerValue];
        if (options == AVAudioSessionInterruptionOptionShouldResume) {
            [self.player play];
        }
    }
}

</code></pre>

<h3 id="toc_4">5.处理线路改变的响应</h3>

<p>在iOS设备上添加或一处音频输入、输出线路时，会发生线路改变。比如用户插上/拔掉耳机，音频会根据情况改变输入或输入线路，同时AVAudioSession会广播一个描述该变化的通知。</p>

<pre><code class="language-objectivec">// 注册线路改变通知
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(handelRouteChange:) name:AVAudioSessionRouteChangeNotification object:[AVAudioSession sharedInstance]];
    
    
// 线路改变通知
- (void)handelRouteChange:(NSNotification *)notification {
    
    NSDictionary *info = notification.userInfo;
    
    AVAudioSessionRouteChangeReason reason = [info[AVAudioSessionRouteChangeReasonKey] unsignedIntegerValue];
    
    if (reason == AVAudioSessionRouteChangeReasonOldDeviceUnavailable) {
        // 获取前一个线路的AVAudioSessionRouteDescription
        AVAudioSessionRouteDescription *previousRoute = info[AVAudioSessionRouteChangePreviousRouteKey];
        
        // 找到第一个输出接口
        AVAudioSessionPortDescription *previousOutput = previousRoute.outputs[0];
        NSString *portType = previousOutput.portType;
        
        if ([portType isEqualToString:AVAudioSessionPortHeadphones]) {// 是否是耳机
            // 当断开耳机时，停止播放音频
            [self.player stop];
        }
    }
}

</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于macOS&Xcode9搭建OpenGL+GLFW+glad开发环境]]></title>
    <link href="http://www.jgx918.top/15120085880017.html"/>
    <updated>2017-11-30T10:23:08+08:00</updated>
    <id>http://www.jgx918.top/15120085880017.html</id>
    <content type="html"><![CDATA[
<p><a href="#homebrew">1.安装homebrew</a><br/>
<a href="#glfw">2.GLFW</a><br/>
<a href="#glad">3.glad</a><br/>
<a href="#xcode">4.Xcode配置</a><br/>
<a href="#demo">5.Demo展示</a></p>

<h2 id="toc_0"><span id="homebrew">1.安装homebrew</span></h2>

<p>前往<a href="https://brew.sh/">Homebrew</a>安装<br/>
<img src="http://image.jgx918.top/2017-11-30-15120091963311.jpg" alt=""/></p>

<h2 id="toc_1"><span id="glfw">2.GLFW</span></h2>

<pre><code class="language-text">brew install glfw3
</code></pre>

<p>安装完成后，GLFW软件包会在<code>/usr/local/Cellar</code>下<img src="http://image.jgx918.top/2017-11-30-15120094655034.jpg" alt=""/></p>

<h2 id="toc_2"><span id="glad">3.glad</span></h2>

<ol>
<li><p>打开GLAD的<a href="http://glad.dav1d.de/">在线服务</a>，将语言(Language)设置为C/C++，在API选项中，选择3.3以上的OpenGL(gl)版本（本教程中将使用3.3版本，但更新的版本也能正常工作）。之后将模式(Profile)设置为Core，并且保证生成加载器(Generate a loader)的选项是选中的。现在可以先（暂时）忽略拓展(Extensions)中的内容。都选择完之后，点击生成(Generate)按钮来生成库文件。<br/>
<img src="http://image.jgx918.top/2017-11-30-15120097002842.jpg" alt=""/></p></li>
<li><p>GLAD现在应该提供给你了一个zip压缩文件，包含两个头文件目录，和一个glad.c文件。下载glad.zip<br/>
<img src="http://image.jgx918.top/2017-11-30-15120097467052.jpg" alt=""/></p></li>
</ol>

<p>3.将glad.zip解压到<code>/usr/local/Cellar</code>下<br/>
<img src="http://image.jgx918.top/2017-11-30-15120098205332.jpg" alt=""/></p>

<h2 id="toc_3"><span id="xcode">4.Xcode配置</span></h2>

<p>1.添加Custom Paths<br/>
在Xcode中找到Peference菜单项，这个一般在File菜单项左边的那个Xcode项目中，然后在里面找到Locations项，再点击Custom Paths，添加3项<br/>
<img src="http://image.jgx918.top/2017-11-30-15120099136708.jpg" alt=""/></p>

<table>
<thead>
<tr>
<th style="text-align: left">Name</th>
<th style="text-align: left">Display Name</th>
<th style="text-align: left">Path</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: left">glad_header</td>
<td style="text-align: left">glad_header</td>
<td style="text-align: left">/usr/local/Cellar/glad/include</td>
</tr>
<tr>
<td style="text-align: left">glfw_header</td>
<td style="text-align: left">glfw_header</td>
<td style="text-align: left">/usr/local/Cellar/glfw/3.2.1/include</td>
</tr>
<tr>
<td style="text-align: left">glfw_lib</td>
<td style="text-align: left">glfw_lib</td>
<td style="text-align: left">/usr/local/Cellar/glfw/3.2.1/lib</td>
</tr>
</tbody>
</table>

<p>2.创建一个macoS命令行C++项目<br/>
<img src="http://image.jgx918.top/2017-11-30-15120102469347.jpg" alt=""/><br/>
3.设置Build Settings Header/Library Search Paths<br/>
<strong>Header Search Paths</strong><br/>
<img src="http://image.jgx918.top/2017-11-30-15120104420699.jpg" alt=""/></p>

<p><strong>Library Search Paths</strong><br/>
<img src="http://image.jgx918.top/2017-11-30-15120104962137.jpg" alt=""/></p>

<p>4.Build Phases-&gt;Complile Sources 添加glad.c<br/>
<img src="http://image.jgx918.top/2017-11-30-15120106050589.jpg" alt=""/><br/>
Add Other...<br/>
<img src="http://image.jgx918.top/2017-11-30-15120106349442.jpg" alt=""/><br/>
<img src="http://image.jgx918.top/2017-11-30-15120106696214.jpg" alt=""/></p>

<p>按住command+shift+g<br/>
输入glad路径<code>/usr/local/Cellar/glad</code><br/>
<img src="http://image.jgx918.top/2017-11-30-15120107030469.jpg" alt=""/></p>

<p>添加glad.c<br/>
<img src="http://image.jgx918.top/2017-11-30-15120107492080.jpg" alt=""/></p>

<p>6.添加依赖库<br/>
<img src="http://image.jgx918.top/2017-11-30-15120109139911.jpg" alt=""/></p>

<p>Xcode9找不到dylib库？点击Add Other<br/>
<img src="http://image.jgx918.top/2017-11-30-15120109962642.jpg" alt=""/></p>

<p>按下command+shift+g 输入glfw的路径<code>/usr/local/Cellar/glfw</code><br/>
<img src="http://image.jgx918.top/2017-11-30-15120110596245.jpg" alt=""/></p>

<p>选择libglfw.3.2.dylib<br/>
<img src="http://image.jgx918.top/2017-11-30-15120111237243.jpg" alt=""/></p>

<h2 id="toc_4"><span id="demo">5.Demo展示</span></h2>

<p>打开项目main.cpp文件编写代码</p>

<pre><code class="language-cpp">#include &lt;iostream&gt;
#import &lt;glad/glad.h&gt;
#import &lt;GLFW/glfw3.h&gt;

void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    glViewport(0, 0, width, height);
}

int main(int argc, const char * argv[]) {
    
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
    
    GLFWwindow* window = glfwCreateWindow(800, 600, &quot;OpenGL+GLFW+glad环境搭建&quot;, NULL, NULL);
    if (window == NULL)
    {
        std::cout &lt;&lt; &quot;Failed to create GLFW window&quot; &lt;&lt; std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout &lt;&lt; &quot;Failed to initialize GLAD&quot; &lt;&lt; std::endl;
        return -1;
    }
    glViewport(0, 0, 800, 600);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
    
    while(!glfwWindowShouldClose(window))
    {
        glfwSwapBuffers(window);
        glfwPollEvents();
    }
    
    glfwTerminate();
    return 0;
}

</code></pre>

<p>运行后你将看到如下<br/>
<img src="http://image.jgx918.top/2017-11-30-15120113172258.jpg" alt=""/></p>

<p>大功告成</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS组件化从 0 到 1]]></title>
    <link href="http://www.jgx918.top/15116237946502.html"/>
    <updated>2017-11-25T23:29:54+08:00</updated>
    <id>http://www.jgx918.top/15116237946502.html</id>
    <content type="html"><![CDATA[
<blockquote>
<ol>
<li>git常用命令</li>
<li>cocoapods基本使用</li>
<li>cocoapods本地私有库的使用</li>
<li>cocoapods远程私有库的使用</li>
<li>组件化概念介绍</li>
<li>项目基本配置</li>
<li>主架构的搭建</li>
</ol>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift4新特性]]></title>
    <link href="http://www.jgx918.top/15068655439253.html"/>
    <updated>2017-10-01T21:45:43+08:00</updated>
    <id>http://www.jgx918.top/15068655439253.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>摘录来自: By the raywenderlich.com Tutorial Team. “iOS 11 by Tutorials”。</p>
</blockquote>

<h2 id="toc_0">One-sided ranges</h2>

<pre><code class="language-swift">“let esports = [&quot;Hearthstone&quot;, &quot;CS:GO&quot;, &quot;League of Legends&quot;, 
               &quot;Super Smash Bros&quot;, &quot;Overwatch&quot;, &quot;Gigantic&quot;]
                  
esports[3...]
// returns [&quot;Super Smash Bros&quot;, &quot;Overwatch&quot;, &quot;Gigantic&quot;]

// In Swift 3, you had to write
esports[3..&lt;esports.endIndex]

esports[...2]
// returns [&quot;Hearthstone&quot;, &quot;CS:GO&quot;, &quot;League of Legends&quot;]

esports[..&lt;2]
// returns [&quot;Hearthstone&quot;, &quot;CS:GO&quot;]”
</code></pre>

<h3 id="toc_1">Infinite sequences</h3>

<pre><code class="language-swift">“let uppercase = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]
let asciiCodes = zip(65..., uppercase)
print(Array(asciiCodes))
// prints [(65, &quot;A&quot;), (66, &quot;B&quot;), (67, &quot;C&quot;), (68, &quot;D&quot;)]”
</code></pre>

<h3 id="toc_2">Pattern matching</h3>

<pre><code class="language-swift">“func gameRank(_ index: Int) -&gt; String {
  switch index {
  case ...1:
    return &quot;Oldie but goodie&quot;
  case 3...:
    return &quot;Meh&quot;
  default:
    return &quot;Awesome-sauce!&quot;
  }
}

gameRank(2) 
// prints &quot;Awesome-sauce!”
</code></pre>

<h2 id="toc_3">Strings</h2>

<pre><code class="language-swift">“let text = &quot;Hakuna Matata&quot;
let unicodeText = &quot;👇🏿👏🏻🤝🇦🇹🇧🇿🇧🇹🇫🇯🇧🇷&quot;

text.count      // 13
text.isEmpty    // false
&quot;&quot;.isEmpty      // true

// `reversed()` returns a `ReversedCollection&lt;String&gt;` so
// it must be converted back to `String`
String(text.reversed()) 
// &quot;atataM anukaH”
</code></pre>

<pre><code class="language-swift">var index = text.index(text.startIndex, offsetBy: 7)
text[index]
// &quot;M&quot;

// You can use prefix(upTo:) and suffix(from:) 
// but why not use one-sided ranges instead

let lastWord = text[index...]
// lastWord is &quot;Matata&quot;

index = text.index(text.endIndex, offsetBy: -7)
let firstWord = text[..&lt;index]
// firstWord is &quot;Hakuna”
</code></pre>

<h2 id="toc_4">Introducing Substring</h2>

<pre><code class="language-swift">type(of: lastWord)
// Substring.Type

lastWord.uppercased()
// &quot;MATATA&quot;

let lastWordAsString = String(lastWord)
type(of: lastWordAsString)
// String.Type
</code></pre>

<h2 id="toc_5">Unicode magic</h2>

<pre><code class="language-swift">// swift3
let c: Character = &quot;🇨🇭&quot;
Array(c.unicodeScalars)
// [127464, 127469]

// swift4
&quot;🇧🇿🇫🇯🇧🇷&quot;.count    // 3
&quot;👇🏿&quot;.count        // 1
&quot;👏🏻&quot;.count        // 1
&quot;🇦🇹&quot;.count        // 1
</code></pre>

<pre><code class="language-swift">let population = &quot;1️⃣👩🏽‍🌾2️⃣🐓3️⃣👨‍👩‍👧‍👦&quot;
population.count
// 6

var nsRange = NSRange(population.startIndex..., 
                      in: population)
// population.startIndex... is a Range&lt;String.Index&gt;
// (0, 29)

population.utf16.count
// 29

let display = NSMutableAttributedString(
        string: population, 
        attributes: [.font: UIFont.systemFont(ofSize: 20)])
</code></pre>

<p><img src="media/15068655439253/15119376010872.png" alt=""/></p>

<pre><code class="language-swift">let oneIndex = population.index(of: &quot;1️⃣&quot;)!
let twoIndex = population.index(of: &quot;2️⃣&quot;)!
let threeIndex = population.index(of: &quot;3️⃣&quot;)!
var range = oneIndex..&lt;twoIndex
nsRange = NSRange(range, in: population)
display.addAttribute(.font, 
                     value: UIFont.systemFont(ofSize: 40), 
                     range: nsRange)
</code></pre>

<p><img src="media/15068655439253/15119375814237.png" alt=""/></p>

<pre><code class="language-swift">range = twoIndex..&lt;threeIndex
nsRange = NSRange(range, in: population)
display.addAttribute(.font, 
                     value: UIFont.systemFont(ofSize: 30), 
                     range: nsRange)
</code></pre>

<p><img src="media/15068655439253/15119377466426.png" alt=""/></p>

<pre><code class="language-swift">let textInput = &quot;You have traveled 483.2 miles.&quot;
let pattern = &quot;[0-9]+(\\.([0-9])?)?&quot;
let regex = try! NSRegularExpression(pattern: pattern, 
                                     options: [])
nsRange = NSRange(textInput.startIndex..., in: textInput)
let mileage = regex.rangeOfFirstMatch(in: textInput, 
                                      range: nsRange)
range = Range(mileage, in: textInput)!
textInput[range]
// &quot;483.2”
</code></pre>

<h2 id="toc_6">Multi-line string literals</h2>

<pre><code class="language-swift">let firstVerse = &quot;&quot;&quot;
  Half a league, half a league,
    Half a league onward,
  All in the valley of Death
    Rode the six hundred.
  &quot;Forward, the Light Brigade!
  &quot;Charge for the guns!&quot; he said:
  Into the valley of Death
    Rode the six hundred.
  &quot;&quot;
</code></pre>

<h5 id="toc_7">print(firstVerse) results in:</h5>

<p><img src="media/15068655439253/15119379343147.png" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS一个支持（1-n）级下拉筛选组件]]></title>
    <link href="http://www.jgx918.top/15063057986361.html"/>
    <updated>2017-09-25T10:16:38+08:00</updated>
    <id>http://www.jgx918.top/15063057986361.html</id>
    <content type="html"><![CDATA[
<h1 id="toc_0">GXComboBox</h1>

<p><a href="https://travis-ci.org/GXFrighting/GXComboBox"><img src="http://img.shields.io/travis/GXFrighting/GXComboBox.svg?style=flat" alt="CI Status"/></a><br/>
<a href="http://cocoapods.org/pods/GXComboBox"><img src="https://img.shields.io/cocoapods/v/GXComboBox.svg?style=flat" alt="Version"/></a><br/>
<a href="http://cocoapods.org/pods/GXComboBox"><img src="https://img.shields.io/cocoapods/l/GXComboBox.svg?style=flat" alt="License"/></a><br/>
<a href="http://cocoapods.org/pods/GXComboBox"><img src="https://img.shields.io/cocoapods/p/GXComboBox.svg?style=flat" alt="Platform"/></a></p>

<ul>
<li>一个支持（1-n）级下拉筛选组件(<a href="https://github.com/GXFrighting/GXComboBox">传送门</a>)</li>
</ul>

<h2 id="toc_1">Requirements</h2>

<ul>
<li>iOS 9.0+</li>
<li>Swift 3</li>
</ul>

<h2 id="toc_2">Example</h2>

<p>To run the example project, clone the repo, and run <code>pod install</code> from the Example directory first.</p>

<h2 id="toc_3">Installation</h2>

<p>GXComboBox is available through <a href="http://cocoapods.org">CocoaPods</a>. To install<br/>
it, simply add the following line to your Podfile:</p>

<pre><code class="language-ruby">pod &#39;GXComboBox&#39;
</code></pre>

<h2 id="toc_4">Contents</h2>

<p><img src="http://image.jgx918.top/2017-09-25-Untitled.gif" alt="Untitled"/></p>

<h2 id="toc_5">How to use GXComboBox</h2>

<ul>
<li>GXComboBox use is like UITableView</li>
</ul>

<pre><code class="language-text">comboBoxView.delegate = self
comboBoxView.dataSoure = self
</code></pre>

<pre><code class="language-text">// MARK: GXComboBoxViewDataSoure
protocol GXComboBoxViewDataSoure {
    
    /// 在这里注册每个TableView Cell
    ///
    /// - Parameters:
    ///   - comboBoxView: comboBoxView
    ///   - column: 列数
    ///   - section: 第几个TableView
    ///   - tableView: TableView
    /// - Returns: void
    func comboBoxView(_ comboBoxView: GXComboBoxView, numberOfSectionInColumn column: Int, section: Int, regiseCell tableView: UITableView)
    
    /// 获取列数
    ///
    /// - Parameters:
    ///   - comboBoxView: comboBoxView
    /// - Returns: 列数（顶部按钮多少个）
    func numberOfColumn(in comboBoxView: GXComboBoxView) -&gt; Int
    
    /// 获取列对应的tableView个数
    ///
    /// - Parameters:
    ///   - comboBoxView: comboBoxView
    ///   - column: 列数
    /// - Returns: tableView个数
    func comboBoxView(_ comboBoxView: GXComboBoxView, numberOfSectionInColumn column: Int) -&gt; Int

    /// 获取每个tableview row个数
    ///
    /// - Parameters:
    ///   - comboBoxView: comboBoxView
    ///   - column: 列数
    ///   - section: 第几个TableView
    /// - Returns: row
    func comboBoxView(_ comboBoxView: GXComboBoxView, numberOfRowsInColum column: Int, section: Int) -&gt; Int

    /// 获取cell
    ///
    /// - Parameters:
    ///   - comboBoxView: comboBoxView
    ///   - indexPath: indexPath
    /// - Returns: cell
    func comboBoxView(_ comboBoxView: GXComboBoxView, cellForRowAt indexPath: GXIndexPath) -&gt; UITableViewCell
    
    /// 按钮的标题
    ///
    /// - Parameters:
    ///   - comboBoxView: comboBoxView
    ///   - column: 列数
    /// - Returns: 按钮标题
    func titleOfColumn(_ comboBoxView: GXComboBoxView, numberOfColumn column: Int) -&gt; String
}

// MARK: GXComboBoxViewDelegate
protocol GXComboBoxViewDelegate {
    
    /// cell height
    ///
    /// - Parameters:
    ///   - comboBoxView: comboBoxView
    ///   - indexPath: indexPath
    /// - Returns: cell height
    func comboBoxView(_ comboBoxView: GXComboBoxView, heightForRowAt indexPath: GXIndexPath) -&gt; CGFloat
    
    /// cell click
    ///
    /// - Parameters:
    ///   - comboBoxView: comboBoxView
    ///   - indexPath: indexPath
    func comboBoxView(_ comboBoxView: GXComboBoxView, didSelectedRowAt indexPath: GXIndexPath)
}
</code></pre>

<h2 id="toc_6">GXIndexPath</h2>

<pre><code class="language-text">class GXIndexPath {
    /// 列 （顶部按钮tag 0，1，2...）
    var column: Int
    /// 第几个tableview
    var section: Int
    /// 第几行
    var row: Int
    
    init(row: Int, section: Int, column: Int) {
        self.section = section
        self.row = row
        self.column = column
    }
}
</code></pre>

<p><img src="http://image.jgx918.top/2017-09-25-GXIndexPath.png" alt="GXIndexPath"/></p>

<h2 id="toc_7">Author</h2>

<p>GXFrighting, <a href="mailto:157610665@qq.com">157610665@qq.com</a></p>

<h2 id="toc_8">License</h2>

<p>GXComboBox is available under the MIT license. See the LICENSE file for more info.</p>

]]></content>
  </entry>
  
</feed>
